<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		                   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:appconfig.properties</value>
                <value>classpath:activemq.properties</value>
            </list>
        </property>
    </bean>

    <!--数据源配置-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${simple.jdbc.url}" />
        <property name="username" value="${simple.jdbc.username}" />
        <property name="password" value="${simple.jdbc.password}" />

        <!--&lt;!&ndash;数据库连接池保持的最小连接数&ndash;&gt;-->
        <!--<property name="minIdle" value="${simple.jdbc.minIdle}" />-->
        <!--&lt;!&ndash;数据库连接池保持的最大连接数&ndash;&gt;-->
        <!--<property name="maxIdle" value="10" />-->

        <!--&lt;!&ndash;-->
            <!--当数据库连接因为某种原因断掉之后，再重新从连接池中拿另外一个连接时实际上这个连接可能-->
            <!--已经无效，所以为了确保所拿到的连接全都有效需要在获取连接，返回连接以及连接空闲时进行-->
            <!--有效性验证 下面3个设置为ture时进行验证，默认为false-->
         <!--&ndash;&gt;-->
        <!--&lt;!&ndash; 取得连接时是否进行有效性验证 &ndash;&gt;-->
        <!--<property name="testOnBorrow" value="${simple.jdbc.testOnBorrow}" />-->
        <!--&lt;!&ndash; 返回连接时是否进行有效性验证 &ndash;&gt;-->
        <!--<property name="testOnReturn" value="${simple.jdbc.testOnReturn}" />-->
        <!--&lt;!&ndash; 连接空闲时是否进行有效性验证 &ndash;&gt;-->
        <!--<property name="testWhileIdle" value="${simple.jdbc.testWhileIdle}" />-->
    </bean>

    <!--SessionFactory配置-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>${entity_package}</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <!--设置Hibernate方言-->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!--是否打印sql-->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <!--格式化sql-->
                <prop key="hibernate.format_sql">true</prop>
                <!--是否自动更新表-->
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            </props>
        </property>
    </bean>

    <!--真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${activemq.brokerURL}"/>
    </bean>

    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <property name="maxConnections" value="${activemq.maxConnections}"/>
    </bean>

    <!--Spring用于管理真正的ConnectionFactory的ConnectionFactory-->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <!--目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory-->
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
    </bean>

    <!--定义消息目标-->
    <bean id="destination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="queue_temp"/>
    </bean>

    <!--Spring提供的JMS工具类，它可以进行消息发送、接收等-->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!--这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象-->
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--配置消息目标-->
        <property name="defaultDestination" ref="destination" />
    </bean>

    <!--事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--AOP切面声明事务管理-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式-->
            <tx:method name="save*" propagation="REQUIRED" read-only="false"/>
            <!--支持当前事务，如果执行到update开头的任何方法时没有事务则开启一个事务 这是最常见的方式-->
            <tx:method name="update*" propagation="REQUIRED" read-only="false"/>
            <!--支持当前事务，如果执行到add开头的任何方法时没有事务则开启一个事务 这是最常见的方式-->
            <tx:method name="add*" propagation="REQUIRED" read-only="false"/>
            <!--支持当前事务，如果执行到delete开头的任何方法时没有事务则开启一个事务 这是最常见的方式-->
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"/>
            <!--支持当前事务，如果当前没有事务，就以非事务方式执行。只读-->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <!--支持当前事务，如果当前没有事务，就以非事务方式执行。只读-->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!--配置事务的切入点-->
    <aop:config>
        <aop:pointcut id="targetMethod" expression="execution(* com.totoro.simple.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="targetMethod" />
    </aop:config>

</beans>